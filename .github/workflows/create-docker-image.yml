name: Create Docker Image

on:
  workflow_dispatch:
    inputs:
      specific_version:
        description: "Optional: Specify a full version (e.g., v1.2.3 or v0.2.1-beta.1) to build. If empty, uses the latest release tag. MUST start with 'v'."
        required: false
        default: ""

env:
  CARGO_TERM_COLOR: always

jobs:
  determine_version:
    runs-on: ubuntu-latest
    outputs:
      version_with_v: ${{ steps.version_info.outputs.version_with_v }}
      is_valid_version: ${{ steps.version_info.outputs.is_valid_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for git describe/tag to find all tags

      - name: Get version information
        id: version_info
        run: |
          set -ex
          TARGET_VERSION=""
          SPECIFIC_VERSION="${{ github.event.inputs.specific_version }}"

          if [[ -n "$SPECIFIC_VERSION" ]]; then
            if [[ ! "$SPECIFIC_VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
              echo "::error::Specified version '$SPECIFIC_VERSION' is not a valid format. It must start with 'v' (e.g., v1.2.3 or v0.2.1-beta.1)."
              echo "is_valid_version=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            TARGET_VERSION="$SPECIFIC_VERSION"
            echo "Using specified version: $TARGET_VERSION"
          else
            echo "No specific version provided, determining latest release tag..."
            # Get the latest tag that looks like a version (vX.Y.Z or vX.Y.Z-prerelease.N)
            # Sorts tags by version semantically (descending), picks the highest.
            TARGET_VERSION=$(git tag --list 'v*' --sort=-v:refname | head -n 1)
            if [[ -z "$TARGET_VERSION" ]]; then
              echo "::error::No version tags starting with 'v' (e.g., vX.Y.Z) found in the repository."
              echo "is_valid_version=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            echo "Latest release version found: $TARGET_VERSION"
          fi

          echo "version_with_v=$TARGET_VERSION" >> $GITHUB_OUTPUT
          echo "is_valid_version=true" >> $GITHUB_OUTPUT

  build_and_publish_image:
    needs: determine_version
    if: needs.determine_version.outputs.is_valid_version == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      GHCR_IMAGE_PATH: ghcr.io/${{ github.repository_owner }}/quantus-node-test
      TARGET_VERSION_WITH_V: ${{ needs.determine_version.outputs.version_with_v }}

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN has packages:write permission from job

      - name: Check if Docker image already exists and fail if so
        id: check_image
        run: |
          set -ex
          IMAGE_TO_CHECK="${{ env.GHCR_IMAGE_PATH }}:${{ env.TARGET_VERSION_WITH_V }}"
          echo "Checking for image: $IMAGE_TO_CHECK"
          
          # Try to inspect the manifest. If it succeeds (exit code 0), the image exists.
          # Errors (like manifest unknown) are redirected to /dev/null.
          if docker manifest inspect "$IMAGE_TO_CHECK" > /dev/null 2>&1; then
            echo "::error::Image $IMAGE_TO_CHECK already exists. Aborting."
            exit 1 # Fail the step and the job
          else
            echo "Image $IMAGE_TO_CHECK does not exist. Proceeding with build."
          fi

      - name: Checkout source for build
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_VERSION_WITH_V }} # Checkout the specific tag to build

      - name: Build and push Docker image from Dockerfile.binary
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.binary
          push: true
          platforms: linux/amd64 # Consistent with create-release.yml
          build-args: |
            VERSION_ARG=${{ env.TARGET_VERSION_WITH_V }} # Dockerfile expects version with 'v'
          tags: |
            ${{ env.GHCR_IMAGE_PATH }}:${{ env.TARGET_VERSION_WITH_V }}
            # To add a 'latest' tag conditionally (e.g., if not a pre-release and is the true latest):
            # You would need more complex logic here to determine if this version should be 'latest'.
            # For example, fetch all tags, sort them, compare, and check for pre-release identifiers.
            # Keeping it simple with just the version tag for now.

      - name: Print completion message
        run: |
          echo "Successfully built and pushed ${{ env.GHCR_IMAGE_PATH }}:${{ env.TARGET_VERSION_WITH_V }}" 